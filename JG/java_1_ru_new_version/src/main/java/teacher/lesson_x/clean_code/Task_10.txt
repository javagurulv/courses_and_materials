Цель тренировки: научиться придумывать хорошие названия,
                 понять связь технического решения и бизнеса.

Легко читаемой делают книгу правильно составленные предложения.
Смысл подчёркивают и передают хорошо подобранные слова.

В программном коде роль предложений и передающих смысл слов
играют названия:
- названия переменных;
- названия методов;
- названия параметров;
- названия классов;
- названия свойств классов;
- названия констант;
- и так далее.

Любое название в коде даёт возможность подчеркнуть и показать
связь кусочка кода с реальной бизнес задачей, частью решения
которой он является. Для качественного кода крепкая связь кода
с реальной бизнес задачей просто необходима. Чем она крепче и
яснее, тем код качественнее.

Для демонстрации связи кода с реальной бизнес задачей возьмём
переменные. В программном коде программист может дать переменным
практически любые названия (определённые ограничения накладываются
только синтаксисом используемого языка программирования).

Предположим, программист решил назвать переменные в своей программе
так: a, b, c, d, x, y, z. О чём говорят эти названия? Ни о чём!
Понять для чего созданы такие переменные будет практически не возможно.
Такой подход используют для обфускации кода, когда специально хотят
сделать код не читаемым.

PS: https://en.wikipedia.org/wiki/Obfuscation_(software)

А что если программист даст переменным в коде программы вот такие
имена: agreement, adjustment, premium, accidentCont, policyHolder,
policyOwner и так далее? Названия этих переменных выбраны не просто
так. Это термины из области страхования. Эти термины были использованы
представителями бизнеса, для которых и создаётся программа.

В терминах Domain Driven Design (DDD) из таких терминов и состоит
Ubiquitous Language (вездесущий язык), язык на котором в идеале
должны общаться представители бизнеса и ИТ специалисты вовлечённые
в процесс разработки программы.

С помощью терминов и названий пришедших из бизнеса строится связь
программного кода (технического решения) с реальным бизнесом. Чем
больше в коде будет специфических бизнес терминов, чем чётче они
будут использоваться, тем крепче будет связь кода с реальной бизнес
задачей, а чем крепче связь тем качественнее само решение.

