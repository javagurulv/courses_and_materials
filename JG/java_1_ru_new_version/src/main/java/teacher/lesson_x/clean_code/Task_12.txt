Цель тренировки: развить умение определять и предвидеть возможности
                 расширения функциональности системы.

Качественный код подразумевает его лёгкое расширение и простое внедрение
в него новой функциональности в будущем. Если в код трудно вносить
изменения это плохой код.

Почему так важно создавать легко изменяемый код?

Потому что жизнь не стоит на месте! Каждый день что-то меняется,
меняется и бизнес для которого вы писали софт, а с изменениями
бизнеса меняются и требования к вашему программному обеспечению.

Серьёзные большие программные проекты живут и используются годами
и десятилетиями. За это время в них вносятся огромное количество
изменений. Скорость внесения изменений в софт становится одним
из ключевых факторов успеха бизнеса.

Если ваш код трудно и тяжело менять, то вы ставите под угрозу весь
бизнес вашего клиента. В ИТ истории было ни мало примеров того, как
плохо написанный код приводил к банкротству целых компаний.

Чтобы научиться создавать легко расширяемый код, в первую очередь
надо научиться предвидеть возможные точки расширения функциональности.
Точки расширения функциональности с точки зрения бизнеса, а потом и
со стороны программного кода. Расширение функциональности программы
обычно инициируется бизнесом при изменениях в бизнес процессах.

Точки расширения функциональности в коде это те места программы, которые
потребуется менять при внедрении новой функциональности.

Задача 1.19: проанализируйте предметную область вышей программы и
составьте список возможных новых требований к вашей программе с
точки зрения бизнеса. Что в ближайшее время может захотеть от вашего
софта бизнес? Опишите каждое придуманное вами бизнес требование в
виде user story.

Задача 1.20: возьмите первое из списка новое бизнес требование к вашей
программе и попробуйте проанализировать где и что в коде придётся менять
для его реализации. Подумайте над тем, можете ли вы уже сейчас (заранее)
подготовить ваш код, чтобы в будущем требуемые изменения можно было
внести легко и просто.

Цель не заключается в реализации нового требования прямо сейчас.
Помните, что это всего лишь потенциальное требование, которое может
появиться у вашего заказчика в будущем, а может и не появиться.

Реализовать заранее все возможные требования просто не возможно. Но
к внедрению некоторых потенциальных новых требований код можно
подготовить уже сейчас (заранее).

Один из таких примеров в задаче с insurance policy premium calculator
это внедрение нового риска страхования. Что нужно будет поменять в
вашем решении при внедрении нового риска страхования (например риск
наводнения)? Как можно подготовить код к этим изменениям так, чтобы
в будущем их можно было сделать быстро и с минимальными изменениями
уже существующего кода?

Если вы придумали как можно улучшить ваш код прямо сейчас - реализуйте
это! А потом внедрите новый риск страхования и убедитесь, что ваша
идея с подготовкой кода к этому сработала.

Задача 1.21: повтор задачи 1.20 с другим потенциальным бизнес
требованием.

