Цель: тренировка разбиения кода на классы.

Дополнительные ограничения:
- не более 3 методов в каждом классе;
- не долее 2 методов в каждом классе;
- не долее 1 метода в каждом классе.

Классы с большим числом методов трудны в понимании и сложны в
использовании, а так же опасны при изменениях кода. Чем меньше класс,
чем меньше функциональности он содержит, тем он проще в использовании
(из маленьких ровных кирпичей проще строить стену нежели из огромных
неотёсанных валунов), проще в понимании и проще при внесении изменений.

Умение создавать маленькие классы с чётко определённой ответственностью
улучшает качество кода.

Цель упомянутых выше ограничений - заставить вас сконцентиророваться
на делении программы на маленькие классы.

Задача 1.5: скопируйте ваше первое решение в отдельный пакет и
проведите его рефакторинг с ограничением <=3 метода в каждом классе.

Задача 1.6: скопируйте ваше первое решение в отдельный пакет и
проведите его рефакторинг с ограничением <=2 метода в каждом классе.

Задача 1.7: скопируйте ваше первое решение в отдельный пакет и
проведите его рефакторинг с ограничением в 1 метод в каждом классе.

Задача 1.8: решите задачу с чистого листа с ограничением не более
3 методов в каждом классе.

Задача 1.9: решите задачу с чистого листа с ограничением не более
2 методов в каждом классе.

Задача 1.10: решите задачу с чистого листа с ограничением не более
1 метода в каждом классе.